import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.8.1
 * Query Engine version: 439da16b2f8314c6faca7d2dad2cdcf0732e8a9c
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  sqlite?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Songs
 * const songs = await prisma.song.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Songs
   * const songs = await prisma.song.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.song`: Exposes CRUD operations for the **Song** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Songs
    * const songs = await prisma.song.findMany()
    * ```
    */
  get song(): SongDelegate;

  /**
   * `prisma.set`: Exposes CRUD operations for the **Set** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sets
    * const sets = await prisma.set.findMany()
    * ```
    */
  get set(): SetDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const SongDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  artist: 'artist',
  setId: 'setId'
};

export declare type SongDistinctFieldEnum = (typeof SongDistinctFieldEnum)[keyof typeof SongDistinctFieldEnum]


export declare const SetDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  setName: 'setName',
  password: 'password'
};

export declare type SetDistinctFieldEnum = (typeof SetDistinctFieldEnum)[keyof typeof SetDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]



/**
 * Model Song
 */

export type Song = {
  id: number
  createdAt: Date
  updatedAt: Date
  title: string
  artist: string
  setId: number | null
}


export type AggregateSong = {
  count: number
  avg: SongAvgAggregateOutputType | null
  sum: SongSumAggregateOutputType | null
  min: SongMinAggregateOutputType | null
  max: SongMaxAggregateOutputType | null
}

export type SongAvgAggregateOutputType = {
  id: number
  setId: number | null
}

export type SongSumAggregateOutputType = {
  id: number
  setId: number | null
}

export type SongMinAggregateOutputType = {
  id: number
  setId: number | null
}

export type SongMaxAggregateOutputType = {
  id: number
  setId: number | null
}


export type SongAvgAggregateInputType = {
  id?: true
  setId?: true
}

export type SongSumAggregateInputType = {
  id?: true
  setId?: true
}

export type SongMinAggregateInputType = {
  id?: true
  setId?: true
}

export type SongMaxAggregateInputType = {
  id?: true
  setId?: true
}

export type AggregateSongArgs = {
  where?: SongWhereInput
  orderBy?: Enumerable<SongOrderByInput> | SongOrderByInput
  cursor?: SongWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<SongDistinctFieldEnum>
  count?: true
  avg?: SongAvgAggregateInputType
  sum?: SongSumAggregateInputType
  min?: SongMinAggregateInputType
  max?: SongMaxAggregateInputType
}

export type GetSongAggregateType<T extends AggregateSongArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetSongAggregateScalarType<T[P]>
}

export type GetSongAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof SongAvgAggregateOutputType ? SongAvgAggregateOutputType[P] : never
}
    
    

export type SongSelect = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
  artist?: boolean
  setId?: boolean
  Set?: boolean | SetArgs
}

export type SongInclude = {
  Set?: boolean | SetArgs
}

export type SongGetPayload<
  S extends boolean | null | undefined | SongArgs,
  U = keyof S
> = S extends true
  ? Song
  : S extends undefined
  ? never
  : S extends SongArgs | FindManySongArgs
  ? 'include' extends U
    ? Song  & {
      [P in TrueKeys<S['include']>]:
      P extends 'Set'
      ? SetGetPayload<S['include'][P]> | null : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Song ? Song[P]
: 
      P extends 'Set'
      ? SetGetPayload<S['select'][P]> | null : never
    }
  : Song
: Song


export interface SongDelegate {
  /**
   * Find zero or one Song that matches the filter.
   * @param {FindOneSongArgs} args - Arguments to find a Song
   * @example
   * // Get one Song
   * const song = await prisma.song.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneSongArgs>(
    args: Subset<T, FindOneSongArgs>
  ): CheckSelect<T, Prisma__SongClient<Song | null>, Prisma__SongClient<SongGetPayload<T> | null>>
  /**
   * Find the first Song that matches the filter.
   * @param {FindFirstSongArgs} args - Arguments to find a Song
   * @example
   * // Get one Song
   * const song = await prisma.song.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstSongArgs>(
    args?: Subset<T, FindFirstSongArgs>
  ): CheckSelect<T, Prisma__SongClient<Song | null>, Prisma__SongClient<SongGetPayload<T> | null>>
  /**
   * Find zero or more Songs that matches the filter.
   * @param {FindManySongArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Songs
   * const songs = await prisma.song.findMany()
   * 
   * // Get first 10 Songs
   * const songs = await prisma.song.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const songWithIdOnly = await prisma.song.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManySongArgs>(
    args?: Subset<T, FindManySongArgs>
  ): CheckSelect<T, Promise<Array<Song>>, Promise<Array<SongGetPayload<T>>>>
  /**
   * Create a Song.
   * @param {SongCreateArgs} args - Arguments to create a Song.
   * @example
   * // Create one Song
   * const Song = await prisma.song.create({
   *   data: {
   *     // ... data to create a Song
   *   }
   * })
   * 
  **/
  create<T extends SongCreateArgs>(
    args: Subset<T, SongCreateArgs>
  ): CheckSelect<T, Prisma__SongClient<Song>, Prisma__SongClient<SongGetPayload<T>>>
  /**
   * Delete a Song.
   * @param {SongDeleteArgs} args - Arguments to delete one Song.
   * @example
   * // Delete one Song
   * const Song = await prisma.song.delete({
   *   where: {
   *     // ... filter to delete one Song
   *   }
   * })
   * 
  **/
  delete<T extends SongDeleteArgs>(
    args: Subset<T, SongDeleteArgs>
  ): CheckSelect<T, Prisma__SongClient<Song>, Prisma__SongClient<SongGetPayload<T>>>
  /**
   * Update one Song.
   * @param {SongUpdateArgs} args - Arguments to update one Song.
   * @example
   * // Update one Song
   * const song = await prisma.song.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends SongUpdateArgs>(
    args: Subset<T, SongUpdateArgs>
  ): CheckSelect<T, Prisma__SongClient<Song>, Prisma__SongClient<SongGetPayload<T>>>
  /**
   * Delete zero or more Songs.
   * @param {SongDeleteManyArgs} args - Arguments to filter Songs to delete.
   * @example
   * // Delete a few Songs
   * const { count } = await prisma.song.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends SongDeleteManyArgs>(
    args: Subset<T, SongDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Songs.
   * @param {SongUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Songs
   * const song = await prisma.song.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends SongUpdateManyArgs>(
    args: Subset<T, SongUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Song.
   * @param {SongUpsertArgs} args - Arguments to update or create a Song.
   * @example
   * // Update or create a Song
   * const song = await prisma.song.upsert({
   *   create: {
   *     // ... data to create a Song
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Song we want to update
   *   }
   * })
  **/
  upsert<T extends SongUpsertArgs>(
    args: Subset<T, SongUpsertArgs>
  ): CheckSelect<T, Prisma__SongClient<Song>, Prisma__SongClient<SongGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManySongArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateSongArgs>(args: Subset<T, AggregateSongArgs>): Promise<GetSongAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Song.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__SongClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  Set<T extends SetArgs = {}>(args?: Subset<T, SetArgs>): CheckSelect<T, Prisma__SetClient<Set | null>, Prisma__SetClient<SetGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Song findOne
 */
export type FindOneSongArgs = {
  /**
   * Select specific fields to fetch from the Song
  **/
  select?: SongSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SongInclude | null
  /**
   * Filter, which Song to fetch.
  **/
  where: SongWhereUniqueInput
}


/**
 * Song findFirst
 */
export type FindFirstSongArgs = {
  /**
   * Select specific fields to fetch from the Song
  **/
  select?: SongSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SongInclude | null
  /**
   * Filter, which Song to fetch.
  **/
  where?: SongWhereInput
  orderBy?: Enumerable<SongOrderByInput> | SongOrderByInput
  cursor?: SongWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<SongDistinctFieldEnum>
}


/**
 * Song findMany
 */
export type FindManySongArgs = {
  /**
   * Select specific fields to fetch from the Song
  **/
  select?: SongSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SongInclude | null
  /**
   * Filter, which Songs to fetch.
  **/
  where?: SongWhereInput
  /**
   * Determine the order of the Songs to fetch.
  **/
  orderBy?: Enumerable<SongOrderByInput> | SongOrderByInput
  /**
   * Sets the position for listing Songs.
  **/
  cursor?: SongWhereUniqueInput
  /**
   * The number of Songs to fetch. If negative number, it will take Songs before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Songs.
  **/
  skip?: number
  distinct?: Enumerable<SongDistinctFieldEnum>
}


/**
 * Song create
 */
export type SongCreateArgs = {
  /**
   * Select specific fields to fetch from the Song
  **/
  select?: SongSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SongInclude | null
  /**
   * The data needed to create a Song.
  **/
  data: SongCreateInput
}


/**
 * Song update
 */
export type SongUpdateArgs = {
  /**
   * Select specific fields to fetch from the Song
  **/
  select?: SongSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SongInclude | null
  /**
   * The data needed to update a Song.
  **/
  data: SongUpdateInput
  /**
   * Choose, which Song to update.
  **/
  where: SongWhereUniqueInput
}


/**
 * Song updateMany
 */
export type SongUpdateManyArgs = {
  data: SongUpdateManyMutationInput
  where?: SongWhereInput
}


/**
 * Song upsert
 */
export type SongUpsertArgs = {
  /**
   * Select specific fields to fetch from the Song
  **/
  select?: SongSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SongInclude | null
  /**
   * The filter to search for the Song to update in case it exists.
  **/
  where: SongWhereUniqueInput
  /**
   * In case the Song found by the `where` argument doesn't exist, create a new Song with this data.
  **/
  create: SongCreateInput
  /**
   * In case the Song was found with the provided `where` argument, update it with this data.
  **/
  update: SongUpdateInput
}


/**
 * Song delete
 */
export type SongDeleteArgs = {
  /**
   * Select specific fields to fetch from the Song
  **/
  select?: SongSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SongInclude | null
  /**
   * Filter which Song to delete.
  **/
  where: SongWhereUniqueInput
}


/**
 * Song deleteMany
 */
export type SongDeleteManyArgs = {
  where?: SongWhereInput
}


/**
 * Song without action
 */
export type SongArgs = {
  /**
   * Select specific fields to fetch from the Song
  **/
  select?: SongSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SongInclude | null
}



/**
 * Model Set
 */

export type Set = {
  id: number
  createdAt: Date
  setName: string
  password: string
}


export type AggregateSet = {
  count: number
  avg: SetAvgAggregateOutputType | null
  sum: SetSumAggregateOutputType | null
  min: SetMinAggregateOutputType | null
  max: SetMaxAggregateOutputType | null
}

export type SetAvgAggregateOutputType = {
  id: number
}

export type SetSumAggregateOutputType = {
  id: number
}

export type SetMinAggregateOutputType = {
  id: number
}

export type SetMaxAggregateOutputType = {
  id: number
}


export type SetAvgAggregateInputType = {
  id?: true
}

export type SetSumAggregateInputType = {
  id?: true
}

export type SetMinAggregateInputType = {
  id?: true
}

export type SetMaxAggregateInputType = {
  id?: true
}

export type AggregateSetArgs = {
  where?: SetWhereInput
  orderBy?: Enumerable<SetOrderByInput> | SetOrderByInput
  cursor?: SetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<SetDistinctFieldEnum>
  count?: true
  avg?: SetAvgAggregateInputType
  sum?: SetSumAggregateInputType
  min?: SetMinAggregateInputType
  max?: SetMaxAggregateInputType
}

export type GetSetAggregateType<T extends AggregateSetArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetSetAggregateScalarType<T[P]>
}

export type GetSetAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof SetAvgAggregateOutputType ? SetAvgAggregateOutputType[P] : never
}
    
    

export type SetSelect = {
  id?: boolean
  createdAt?: boolean
  setName?: boolean
  password?: boolean
  songs?: boolean | FindManySongArgs
}

export type SetInclude = {
  songs?: boolean | FindManySongArgs
}

export type SetGetPayload<
  S extends boolean | null | undefined | SetArgs,
  U = keyof S
> = S extends true
  ? Set
  : S extends undefined
  ? never
  : S extends SetArgs | FindManySetArgs
  ? 'include' extends U
    ? Set  & {
      [P in TrueKeys<S['include']>]:
      P extends 'songs'
      ? Array<SongGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Set ? Set[P]
: 
      P extends 'songs'
      ? Array<SongGetPayload<S['select'][P]>> : never
    }
  : Set
: Set


export interface SetDelegate {
  /**
   * Find zero or one Set that matches the filter.
   * @param {FindOneSetArgs} args - Arguments to find a Set
   * @example
   * // Get one Set
   * const set = await prisma.set.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneSetArgs>(
    args: Subset<T, FindOneSetArgs>
  ): CheckSelect<T, Prisma__SetClient<Set | null>, Prisma__SetClient<SetGetPayload<T> | null>>
  /**
   * Find the first Set that matches the filter.
   * @param {FindFirstSetArgs} args - Arguments to find a Set
   * @example
   * // Get one Set
   * const set = await prisma.set.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstSetArgs>(
    args?: Subset<T, FindFirstSetArgs>
  ): CheckSelect<T, Prisma__SetClient<Set | null>, Prisma__SetClient<SetGetPayload<T> | null>>
  /**
   * Find zero or more Sets that matches the filter.
   * @param {FindManySetArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Sets
   * const sets = await prisma.set.findMany()
   * 
   * // Get first 10 Sets
   * const sets = await prisma.set.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const setWithIdOnly = await prisma.set.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManySetArgs>(
    args?: Subset<T, FindManySetArgs>
  ): CheckSelect<T, Promise<Array<Set>>, Promise<Array<SetGetPayload<T>>>>
  /**
   * Create a Set.
   * @param {SetCreateArgs} args - Arguments to create a Set.
   * @example
   * // Create one Set
   * const Set = await prisma.set.create({
   *   data: {
   *     // ... data to create a Set
   *   }
   * })
   * 
  **/
  create<T extends SetCreateArgs>(
    args: Subset<T, SetCreateArgs>
  ): CheckSelect<T, Prisma__SetClient<Set>, Prisma__SetClient<SetGetPayload<T>>>
  /**
   * Delete a Set.
   * @param {SetDeleteArgs} args - Arguments to delete one Set.
   * @example
   * // Delete one Set
   * const Set = await prisma.set.delete({
   *   where: {
   *     // ... filter to delete one Set
   *   }
   * })
   * 
  **/
  delete<T extends SetDeleteArgs>(
    args: Subset<T, SetDeleteArgs>
  ): CheckSelect<T, Prisma__SetClient<Set>, Prisma__SetClient<SetGetPayload<T>>>
  /**
   * Update one Set.
   * @param {SetUpdateArgs} args - Arguments to update one Set.
   * @example
   * // Update one Set
   * const set = await prisma.set.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends SetUpdateArgs>(
    args: Subset<T, SetUpdateArgs>
  ): CheckSelect<T, Prisma__SetClient<Set>, Prisma__SetClient<SetGetPayload<T>>>
  /**
   * Delete zero or more Sets.
   * @param {SetDeleteManyArgs} args - Arguments to filter Sets to delete.
   * @example
   * // Delete a few Sets
   * const { count } = await prisma.set.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends SetDeleteManyArgs>(
    args: Subset<T, SetDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Sets.
   * @param {SetUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Sets
   * const set = await prisma.set.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends SetUpdateManyArgs>(
    args: Subset<T, SetUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Set.
   * @param {SetUpsertArgs} args - Arguments to update or create a Set.
   * @example
   * // Update or create a Set
   * const set = await prisma.set.upsert({
   *   create: {
   *     // ... data to create a Set
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Set we want to update
   *   }
   * })
  **/
  upsert<T extends SetUpsertArgs>(
    args: Subset<T, SetUpsertArgs>
  ): CheckSelect<T, Prisma__SetClient<Set>, Prisma__SetClient<SetGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManySetArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateSetArgs>(args: Subset<T, AggregateSetArgs>): Promise<GetSetAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Set.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__SetClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  songs<T extends FindManySongArgs = {}>(args?: Subset<T, FindManySongArgs>): CheckSelect<T, Promise<Array<Song>>, Promise<Array<SongGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Set findOne
 */
export type FindOneSetArgs = {
  /**
   * Select specific fields to fetch from the Set
  **/
  select?: SetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SetInclude | null
  /**
   * Filter, which Set to fetch.
  **/
  where: SetWhereUniqueInput
}


/**
 * Set findFirst
 */
export type FindFirstSetArgs = {
  /**
   * Select specific fields to fetch from the Set
  **/
  select?: SetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SetInclude | null
  /**
   * Filter, which Set to fetch.
  **/
  where?: SetWhereInput
  orderBy?: Enumerable<SetOrderByInput> | SetOrderByInput
  cursor?: SetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<SetDistinctFieldEnum>
}


/**
 * Set findMany
 */
export type FindManySetArgs = {
  /**
   * Select specific fields to fetch from the Set
  **/
  select?: SetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SetInclude | null
  /**
   * Filter, which Sets to fetch.
  **/
  where?: SetWhereInput
  /**
   * Determine the order of the Sets to fetch.
  **/
  orderBy?: Enumerable<SetOrderByInput> | SetOrderByInput
  /**
   * Sets the position for listing Sets.
  **/
  cursor?: SetWhereUniqueInput
  /**
   * The number of Sets to fetch. If negative number, it will take Sets before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Sets.
  **/
  skip?: number
  distinct?: Enumerable<SetDistinctFieldEnum>
}


/**
 * Set create
 */
export type SetCreateArgs = {
  /**
   * Select specific fields to fetch from the Set
  **/
  select?: SetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SetInclude | null
  /**
   * The data needed to create a Set.
  **/
  data: SetCreateInput
}


/**
 * Set update
 */
export type SetUpdateArgs = {
  /**
   * Select specific fields to fetch from the Set
  **/
  select?: SetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SetInclude | null
  /**
   * The data needed to update a Set.
  **/
  data: SetUpdateInput
  /**
   * Choose, which Set to update.
  **/
  where: SetWhereUniqueInput
}


/**
 * Set updateMany
 */
export type SetUpdateManyArgs = {
  data: SetUpdateManyMutationInput
  where?: SetWhereInput
}


/**
 * Set upsert
 */
export type SetUpsertArgs = {
  /**
   * Select specific fields to fetch from the Set
  **/
  select?: SetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SetInclude | null
  /**
   * The filter to search for the Set to update in case it exists.
  **/
  where: SetWhereUniqueInput
  /**
   * In case the Set found by the `where` argument doesn't exist, create a new Set with this data.
  **/
  create: SetCreateInput
  /**
   * In case the Set was found with the provided `where` argument, update it with this data.
  **/
  update: SetUpdateInput
}


/**
 * Set delete
 */
export type SetDeleteArgs = {
  /**
   * Select specific fields to fetch from the Set
  **/
  select?: SetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SetInclude | null
  /**
   * Filter which Set to delete.
  **/
  where: SetWhereUniqueInput
}


/**
 * Set deleteMany
 */
export type SetDeleteManyArgs = {
  where?: SetWhereInput
}


/**
 * Set without action
 */
export type SetArgs = {
  /**
   * Select specific fields to fetch from the Set
  **/
  select?: SetSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: SetInclude | null
}



/**
 * Deep Input Types
 */


export type SongWhereInput = {
  AND?: SongWhereInput | Enumerable<SongWhereInput>
  OR?: SongWhereInput | Enumerable<SongWhereInput>
  NOT?: SongWhereInput | Enumerable<SongWhereInput>
  id?: IntFilter | number
  createdAt?: DateTimeFilter | Date | string
  updatedAt?: DateTimeFilter | Date | string
  title?: StringFilter | string
  artist?: StringFilter | string
  setId?: IntNullableFilter | number | null
  Set?: SetRelationFilter | SetWhereInput | null
}

export type SongOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
  title?: SortOrder
  artist?: SortOrder
  setId?: SortOrder
}

export type SongWhereUniqueInput = {
  id?: number
}

export type SetWhereInput = {
  AND?: SetWhereInput | Enumerable<SetWhereInput>
  OR?: SetWhereInput | Enumerable<SetWhereInput>
  NOT?: SetWhereInput | Enumerable<SetWhereInput>
  id?: IntFilter | number
  createdAt?: DateTimeFilter | Date | string
  setName?: StringFilter | string
  password?: StringFilter | string
  songs?: SongListRelationFilter
}

export type SetOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  setName?: SortOrder
  password?: SortOrder
}

export type SetWhereUniqueInput = {
  id?: number
  setName?: string
}

export type SongCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  artist: string
  Set?: SetCreateOneWithoutSongsInput
}

export type SongUpdateInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | StringFieldUpdateOperationsInput
  artist?: string | StringFieldUpdateOperationsInput
  Set?: SetUpdateOneWithoutSongsInput
}

export type SongUpdateManyMutationInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | StringFieldUpdateOperationsInput
  artist?: string | StringFieldUpdateOperationsInput
}

export type SetCreateInput = {
  createdAt?: Date | string
  setName: string
  password: string
  songs?: SongCreateManyWithoutSetInput
}

export type SetUpdateInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  setName?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
  songs?: SongUpdateManyWithoutSetInput
}

export type SetUpdateManyMutationInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  setName?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type IntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type SetRelationFilter = {
  is?: SetWhereInput | null
  isNot?: SetWhereInput | null
}

export type SongListRelationFilter = {
  every?: SongWhereInput
  some?: SongWhereInput
  none?: SongWhereInput
}

export type SetCreateOneWithoutSongsInput = {
  create?: SetCreateWithoutSongsInput
  connect?: SetWhereUniqueInput
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type SetUpdateOneWithoutSongsInput = {
  create?: SetCreateWithoutSongsInput
  connect?: SetWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: SetUpdateWithoutSongsDataInput
  upsert?: SetUpsertWithoutSongsInput
}

export type SongCreateManyWithoutSetInput = {
  create?: SongCreateWithoutSetInput | Enumerable<SongCreateWithoutSetInput>
  connect?: SongWhereUniqueInput | Enumerable<SongWhereUniqueInput>
}

export type SongUpdateManyWithoutSetInput = {
  create?: SongCreateWithoutSetInput | Enumerable<SongCreateWithoutSetInput>
  connect?: SongWhereUniqueInput | Enumerable<SongWhereUniqueInput>
  set?: SongWhereUniqueInput | Enumerable<SongWhereUniqueInput>
  disconnect?: SongWhereUniqueInput | Enumerable<SongWhereUniqueInput>
  delete?: SongWhereUniqueInput | Enumerable<SongWhereUniqueInput>
  update?: SongUpdateWithWhereUniqueWithoutSetInput | Enumerable<SongUpdateWithWhereUniqueWithoutSetInput>
  updateMany?: SongUpdateManyWithWhereNestedInput | Enumerable<SongUpdateManyWithWhereNestedInput>
  deleteMany?: SongScalarWhereInput | Enumerable<SongScalarWhereInput>
  upsert?: SongUpsertWithWhereUniqueWithoutSetInput | Enumerable<SongUpsertWithWhereUniqueWithoutSetInput>
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type NestedIntNullableFilter = {
  equals?: number | null
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type SetCreateWithoutSongsInput = {
  createdAt?: Date | string
  setName: string
  password: string
}

export type SetUpdateWithoutSongsDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  setName?: string | StringFieldUpdateOperationsInput
  password?: string | StringFieldUpdateOperationsInput
}

export type SetUpsertWithoutSongsInput = {
  update: SetUpdateWithoutSongsDataInput
  create: SetCreateWithoutSongsInput
}

export type SongCreateWithoutSetInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  artist: string
}

export type SongUpdateWithWhereUniqueWithoutSetInput = {
  where: SongWhereUniqueInput
  data: SongUpdateWithoutSetDataInput
}

export type SongUpdateManyWithWhereNestedInput = {
  where: SongScalarWhereInput
  data: SongUpdateManyDataInput
}

export type SongScalarWhereInput = {
  AND?: SongScalarWhereInput | Enumerable<SongScalarWhereInput>
  OR?: SongScalarWhereInput | Enumerable<SongScalarWhereInput>
  NOT?: SongScalarWhereInput | Enumerable<SongScalarWhereInput>
  id?: IntFilter | number
  createdAt?: DateTimeFilter | Date | string
  updatedAt?: DateTimeFilter | Date | string
  title?: StringFilter | string
  artist?: StringFilter | string
  setId?: IntNullableFilter | number | null
}

export type SongUpsertWithWhereUniqueWithoutSetInput = {
  where: SongWhereUniqueInput
  update: SongUpdateWithoutSetDataInput
  create: SongCreateWithoutSetInput
}

export type SongUpdateWithoutSetDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | StringFieldUpdateOperationsInput
  artist?: string | StringFieldUpdateOperationsInput
}

export type SongUpdateManyDataInput = {
  createdAt?: Date | string | DateTimeFieldUpdateOperationsInput
  updatedAt?: Date | string | DateTimeFieldUpdateOperationsInput
  title?: string | StringFieldUpdateOperationsInput
  artist?: string | StringFieldUpdateOperationsInput
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
