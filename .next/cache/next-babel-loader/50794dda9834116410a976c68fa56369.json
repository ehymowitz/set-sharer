{"ast":null,"code":"import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport cookie from 'cookie';\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\nexport default (async (req, res) => {\n  const salt = bcrypt.genSaltSync();\n  const {\n    setName,\n    password\n  } = req.body;\n  console.log(req.body.gigName);\n  let set;\n\n  try {\n    set = await console.log(prisma.set.create({\n      data: {\n        setName,\n        password: bcrypt.hashSync(password, salt)\n      }\n    }));\n  } catch (error) {\n    res.json({\n      error: \"set name already exists\"\n    });\n    return;\n  }\n\n  const token = jwt.sign({\n    setName: set.setName,\n    id: set.id,\n    time: new Date()\n  }, process.env.JWT_SECRET, {\n    expiresIn: \"6h\"\n  });\n  res.setHeader(\"Set-Cookie\", cookie.serialize(\"token\", token, {\n    httpOnly: true,\n    maxAge: 6 * 60 * 60,\n    path: \"/\",\n    sameSite: \"lax\",\n    secure: false\n  }));\n  res.json(set);\n  return;\n});","map":{"version":3,"sources":["/Users/elie/code/ehymowitz/set-sharer/pages/api/create.ts"],"names":["bcrypt","jwt","cookie","PrismaClient","prisma","req","res","salt","genSaltSync","setName","password","body","console","log","gigName","set","create","data","hashSync","error","json","token","sign","id","time","Date","process","env","JWT_SECRET","expiresIn","setHeader","serialize","httpOnly","maxAge","path","sameSite","secure"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,MAAMC,MAAM,GAAG,IAAID,YAAJ,EAAf;AAEA,gBAAe,OAAOE,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAMC,IAAI,GAAGP,MAAM,CAACQ,WAAP,EAAb;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwBL,GAAG,CAACM,IAAlC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACM,IAAJ,CAASG,OAArB;AACA,MAAIC,GAAJ;;AACA,MAAI;AACFA,IAAAA,GAAG,GAAG,MAAMH,OAAO,CAACC,GAAR,CAAYT,MAAM,CAACW,GAAP,CAAWC,MAAX,CAAkB;AACxCC,MAAAA,IAAI,EAAE;AACJR,QAAAA,OADI;AAEJC,QAAAA,QAAQ,EAAEV,MAAM,CAACkB,QAAP,CAAgBR,QAAhB,EAA0BH,IAA1B;AAFN;AADkC,KAAlB,CAAZ,CAAZ;AAMD,GAPD,CAOE,OAAOY,KAAP,EAAc;AACdb,IAAAA,GAAG,CAACc,IAAJ,CAAS;AAAED,MAAAA,KAAK,EAAE;AAAT,KAAT;AACA;AACD;;AACD,QAAME,KAAK,GAAGpB,GAAG,CAACqB,IAAJ,CACZ;AAAEb,IAAAA,OAAO,EAAEM,GAAG,CAACN,OAAf;AAAwBc,IAAAA,EAAE,EAAER,GAAG,CAACQ,EAAhC;AAAoCC,IAAAA,IAAI,EAAE,IAAIC,IAAJ;AAA1C,GADY,EAEZC,OAAO,CAACC,GAAR,CAAYC,UAFA,EAGZ;AACEC,IAAAA,SAAS,EAAE;AADb,GAHY,CAAd;AAQAvB,EAAAA,GAAG,CAACwB,SAAJ,CACE,YADF,EAEE5B,MAAM,CAAC6B,SAAP,CAAiB,OAAjB,EAA0BV,KAA1B,EAAiC;AAC/BW,IAAAA,QAAQ,EAAE,IADqB;AAE/BC,IAAAA,MAAM,EAAE,IAAI,EAAJ,GAAS,EAFc;AAG/BC,IAAAA,IAAI,EAAE,GAHyB;AAI/BC,IAAAA,QAAQ,EAAE,KAJqB;AAK/BC,IAAAA,MAAM;AALyB,GAAjC,CAFF;AAUA9B,EAAAA,GAAG,CAACc,IAAJ,CAASL,GAAT;AACA;AACD,CApCD","sourcesContent":["import bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\nimport cookie from 'cookie'\nimport { PrismaClient } from '@prisma/client'\nconst prisma = new PrismaClient()\n\nexport default async (req, res) => {\n  const salt = bcrypt.genSaltSync()\n  const { setName, password } = req.body\n  console.log(req.body.gigName)\n  let set\n  try {\n    set = await console.log(prisma.set.create({\n      data: {\n        setName,\n        password: bcrypt.hashSync(password, salt),\n      },\n    }))\n  } catch (error) {\n    res.json({ error: \"set name already exists\"})\n    return\n  }\n  const token = jwt.sign(\n    { setName: set.setName, id: set.id, time: new Date() },\n    process.env.JWT_SECRET,\n    {\n      expiresIn: \"6h\",\n    }\n  )\n\n  res.setHeader(\n    \"Set-Cookie\",\n    cookie.serialize(\"token\", token, {\n      httpOnly: true,\n      maxAge: 6 * 60 * 60,\n      path: \"/\",\n      sameSite: \"lax\",\n      secure: process.env.NODE_ENV === \"production\",\n    })\n  )\n  res.json(set)\n  return\n}\n"]},"metadata":{},"sourceType":"module"}