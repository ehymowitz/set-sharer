{"ast":null,"code":"import { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport cookie from 'cookie';\nexport default (async (req, res) => {\n  const {\n    gigName,\n    password\n  } = req.body;\n  const set = await prisma.set.findOne({\n    where: {\n      setName: gigName\n    }\n  });\n\n  if (set && bcrypt.compareSync(password, set.password)) {\n    const token = jwt.sign({\n      setName: set.setName,\n      id: set.id,\n      time: new Date()\n    }, process.env.JWT_SECRET, {\n      expiresIn: \"6h\"\n    });\n    res.setHeader(\"Set-Cookie\", cookie.serialize(\"token\", token, {\n      httpOnly: true,\n      maxAge: 6 * 60 * 60,\n      path: \"/\",\n      sameSite: \"lax\",\n      secure: false\n    }));\n    res.json(set);\n  } else {\n    res.json({\n      error: \"Incorrect username or password\"\n    });\n    return;\n  }\n});","map":{"version":3,"sources":["/Users/elie/code/ehymowitz/set-sharer/pages/api/login.ts"],"names":["PrismaClient","prisma","bcrypt","jwt","cookie","req","res","gigName","password","body","set","findOne","where","setName","compareSync","token","sign","id","time","Date","process","env","JWT_SECRET","expiresIn","setHeader","serialize","httpOnly","maxAge","path","sameSite","secure","json","error"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,MAAMC,MAAM,GAAG,IAAID,YAAJ,EAAf;AACA,OAAOE,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwBH,GAAG,CAACI,IAAlC;AAEA,QAAMC,GAAG,GAAG,MAAMT,MAAM,CAACS,GAAP,CAAWC,OAAX,CAAmB;AACnCC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAEN;AAAX;AAD4B,GAAnB,CAAlB;;AAIA,MAAIG,GAAG,IAAIR,MAAM,CAACY,WAAP,CAAmBN,QAAnB,EAA6BE,GAAG,CAACF,QAAjC,CAAX,EAAuD;AACrD,UAAMO,KAAK,GAAGZ,GAAG,CAACa,IAAJ,CACZ;AAAEH,MAAAA,OAAO,EAAEH,GAAG,CAACG,OAAf;AAAwBI,MAAAA,EAAE,EAAEP,GAAG,CAACO,EAAhC;AAAoCC,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AAA1C,KADY,EAEZC,OAAO,CAACC,GAAR,CAAYC,UAFA,EAGZ;AACEC,MAAAA,SAAS,EAAE;AADb,KAHY,CAAd;AAQAjB,IAAAA,GAAG,CAACkB,SAAJ,CACE,YADF,EAEEpB,MAAM,CAACqB,SAAP,CAAiB,OAAjB,EAA0BV,KAA1B,EAAiC;AAC/BW,MAAAA,QAAQ,EAAE,IADqB;AAE/BC,MAAAA,MAAM,EAAE,IAAI,EAAJ,GAAS,EAFc;AAG/BC,MAAAA,IAAI,EAAE,GAHyB;AAI/BC,MAAAA,QAAQ,EAAE,KAJqB;AAK/BC,MAAAA,MAAM;AALyB,KAAjC,CAFF;AAWAxB,IAAAA,GAAG,CAACyB,IAAJ,CAASrB,GAAT;AACD,GArBD,MAqBO;AACLJ,IAAAA,GAAG,CAACyB,IAAJ,CAAS;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAT;AACA;AACD;AACF,CAhCD","sourcesContent":["import { PrismaClient } from '@prisma/client'\nconst prisma = new PrismaClient()\nimport bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\nimport cookie from 'cookie'\n\nexport default async (req, res) => {\n  const { gigName, password } = req.body\n\n  const set = await prisma.set.findOne({\n    where: { setName: gigName },\n  })\n\n  if (set && bcrypt.compareSync(password, set.password)) {\n    const token = jwt.sign(\n      { setName: set.setName, id: set.id, time: new Date() },\n      process.env.JWT_SECRET,\n      {\n        expiresIn: \"6h\",\n      }\n    )\n\n    res.setHeader(\n      \"Set-Cookie\",\n      cookie.serialize(\"token\", token, {\n        httpOnly: true,\n        maxAge: 6 * 60 * 60,\n        path: \"/\",\n        sameSite: \"lax\",\n        secure: process.env.NODE_ENV === \"production\",\n      })\n    )\n\n    res.json(set)\n  } else {\n    res.json({ error: \"Incorrect username or password\" })\n    return\n  }\n}\n"]},"metadata":{},"sourceType":"module"}