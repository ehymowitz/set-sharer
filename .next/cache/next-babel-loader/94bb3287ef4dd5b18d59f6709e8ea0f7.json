{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/elie/code/ehymowitz/set-sharer/components/createSong.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useSongs, useGigInfo } from './util/hooks';\nimport { mutate } from 'swr';\nimport { fetcher } from './util/fetcher';\n\nvar CreateSong = function CreateSong() {\n  _s();\n\n  var _useState = useState(\"\"),\n      title = _useState[0],\n      setTitle = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      artist = _useState2[0],\n      setArtist = _useState2[1];\n\n  var _useSongs = useSongs(),\n      songs = _useSongs.songs;\n\n  var _useGigInfo = useGigInfo(),\n      gigInfo = _useGigInfo.gigInfo;\n\n  return __jsx(\"form\", {\n    onSubmit: /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n\n                if (!(artist.length < 1 || title.length < 1)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                alert(\"Fully fill out the form\");\n                return _context.abrupt(\"return\");\n\n              case 4:\n                if (!(!gigInfo || !gigInfo.setName)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                alert(\"You need to be vieing a gig to add a song\");\n                return _context.abrupt(\"return\");\n\n              case 7:\n                mutate(\"/api/songs\", [{\n                  title: title,\n                  artist: artist,\n                  Set: useGigInfo\n                }].concat(_toConsumableArray(songs)), false);\n                fetcher(\"/api/song/create\", {\n                  title: title,\n                  artist: artist\n                });\n                setTitle(\"\");\n                setArtist(\"\");\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(\"input\", {\n    value: title,\n    onChange: function onChange(e) {\n      return setTitle(e.target.value);\n    },\n    placeholder: \"Song Name\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), __jsx(\"input\", {\n    value: artist,\n    onChange: function onChange(e) {\n      return setArtist(e.target.value);\n    },\n    placeholder: \"Song Artist\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), __jsx(\"input\", {\n    type: \"submit\",\n    value: \"add\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(CreateSong, \"fobnSNjstHCPAmsNM7RDXLZhfYQ=\", false, function () {\n  return [useSongs, useGigInfo];\n});\n\n_c = CreateSong;\nexport default CreateSong;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateSong\");","map":{"version":3,"sources":["/Users/elie/code/ehymowitz/set-sharer/components/createSong.tsx"],"names":["React","useState","useSongs","useGigInfo","mutate","fetcher","CreateSong","title","setTitle","artist","setArtist","songs","gigInfo","e","preventDefault","length","alert","setName","Set","target","value"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,cAArC;AACA,SAASC,MAAT,QAAuB,KAAvB;AACA,SAASC,OAAT,QAAwB,gBAAxB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA;;AAAA,kBACGL,QAAQ,CAAC,EAAD,CADX;AAAA,MAChBM,KADgB;AAAA,MACTC,QADS;;AAAA,mBAEKP,QAAQ,CAAC,EAAD,CAFb;AAAA,MAEhBQ,MAFgB;AAAA,MAERC,SAFQ;;AAAA,kBAGLR,QAAQ,EAHH;AAAA,MAGfS,KAHe,aAGfA,KAHe;;AAAA,oBAIHR,UAAU,EAJP;AAAA,MAIfS,OAJe,eAIfA,OAJe;;AAMvB,SACE;AACE,IAAA,QAAQ;AAAA,0EAAI,iBAAMC,CAAN;AAAA;AAAA;AAAA;AAAA;AACRA,gBAAAA,CAAC,CAACC,cAAF;;AADQ,sBAGJL,MAAM,CAACM,MAAP,GAAgB,CAAhB,IAAqBR,KAAK,CAACQ,MAAN,GAAe,CAHhC;AAAA;AAAA;AAAA;;AAINC,gBAAAA,KAAK,CAAC,yBAAD,CAAL;AAJM;;AAAA;AAAA,sBAQH,CAACJ,OAAD,IAAY,CAACA,OAAO,CAACK,OARlB;AAAA;AAAA;AAAA;;AASND,gBAAAA,KAAK,CAAC,2CAAD,CAAL;AATM;;AAAA;AAaRZ,gBAAAA,MAAM,CAAC,YAAD,GAAgB;AAACG,kBAAAA,KAAK,EAAEA,KAAR;AAAeE,kBAAAA,MAAM,EAAEA,MAAvB;AAA+BS,kBAAAA,GAAG,EAAEf;AAApC,iBAAhB,4BAAoEQ,KAApE,IAA4E,KAA5E,CAAN;AACAN,gBAAAA,OAAO,CAAC,kBAAD,EAAqB;AAC1BE,kBAAAA,KAAK,EAAEA,KADmB;AAE1BE,kBAAAA,MAAM,EAAEA;AAFkB,iBAArB,CAAP;AAIAD,gBAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,gBAAAA,SAAS,CAAC,EAAD,CAAT;;AAnBQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA;AAAA;AAAA;AAAA,OADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAuBE;AAAO,IAAA,KAAK,EAAIH,KAAhB;AAAuB,IAAA,QAAQ,EAAK,kBAAAM,CAAC;AAAA,aAAIL,QAAQ,CAACK,CAAC,CAACM,MAAF,CAASC,KAAV,CAAZ;AAAA,KAArC;AAAmE,IAAA,WAAW,EAAG,WAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBF,EAwBE;AAAO,IAAA,KAAK,EAAIX,MAAhB;AAAwB,IAAA,QAAQ,EAAK,kBAAAI,CAAC;AAAA,aAAIH,SAAS,CAACG,CAAC,CAACM,MAAF,CAASC,KAAV,CAAb;AAAA,KAAtC;AAAqE,IAAA,WAAW,EAAG,aAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBF,EAyBE;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzBF,CADF;AA6BD,CAnCD;;GAAMd,U;UAGcJ,Q,EACEC,U;;;KAJhBG,U;AAqCN,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useSongs, useGigInfo } from './util/hooks'\nimport { mutate } from 'swr'\nimport { fetcher } from './util/fetcher'\n\nconst CreateSong = () => {\n  const [title, setTitle] = useState(\"\")\n  const [artist, setArtist] = useState(\"\")\n  const { songs } = useSongs()\n  const { gigInfo } = useGigInfo()\n\n  return (\n    <form\n      onSubmit = {async e => {\n          e.preventDefault()\n\n          if (artist.length < 1 || title.length < 1) {\n            alert(\"Fully fill out the form\")\n            return;\n          }\n\n          if ( !gigInfo || !gigInfo.setName ){\n            alert(\"You need to be vieing a gig to add a song\")\n            return\n          }\n\n          mutate(\"/api/songs\", [{title: title, artist: artist, Set: useGigInfo}, ...songs], false)\n          fetcher(\"/api/song/create\", {\n            title: title,\n            artist: artist,\n          })\n          setTitle(\"\")\n          setArtist(\"\")\n      }}\n    >\n      <input value = {title} onChange = { e => setTitle(e.target.value)} placeholder = \"Song Name\"/>\n      <input value = {artist} onChange = { e => setArtist(e.target.value)} placeholder = \"Song Artist\"/>\n      <input type=\"submit\" value=\"add\"/>\n    </form>\n  )\n}\n\nexport default CreateSong\n"]},"metadata":{},"sourceType":"module"}