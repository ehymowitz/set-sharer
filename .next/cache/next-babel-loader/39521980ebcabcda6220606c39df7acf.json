{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { PrismaClient } from '@prisma/client';\nvar prisma = new PrismaClient();\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport cookie from 'cookie';\nexport default /*#__PURE__*/(function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n    var _req$body, gigName, password, set, token;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _req$body = req.body, gigName = _req$body.gigName, password = _req$body.password;\n            _context.next = 3;\n            return prisma.set.findOne({\n              where: {\n                setName: gigName\n              }\n            });\n\n          case 3:\n            set = _context.sent;\n\n            if (!(set && bcrypt.compareSync(password, set.password))) {\n              _context.next = 10;\n              break;\n            }\n\n            token = jwt.sign({\n              setName: set.setName,\n              id: set.id,\n              time: new Date()\n            }, process.env.JWT_SECRET, {\n              expiresIn: \"6h\"\n            });\n            res.setHeader(\"Set-Cookie\", cookie.serialize(\"token\", token, {\n              httpOnly: true,\n              maxAge: 6 * 60 * 60,\n              path: \"/\",\n              sameSite: \"lax\",\n              secure: false\n            }));\n            res.json(set);\n            _context.next = 12;\n            break;\n\n          case 10:\n            res.json({\n              error: \"Incorrect username or password\"\n            });\n            return _context.abrupt(\"return\");\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/Users/elie/code/ehymowitz/set-sharer/pages/api/login.ts"],"names":["PrismaClient","prisma","bcrypt","jwt","cookie","req","res","body","gigName","password","set","findOne","where","setName","compareSync","token","sign","id","time","Date","process","env","JWT_SECRET","expiresIn","setHeader","serialize","httpOnly","maxAge","path","sameSite","secure","json","error"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,IAAMC,MAAM,GAAG,IAAID,YAAJ,EAAf;AACA,OAAOE,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA;AAAA,sEAAe,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACiBD,GAAG,CAACE,IADrB,EACLC,OADK,aACLA,OADK,EACIC,QADJ,aACIA,QADJ;AAAA;AAAA,mBAGKR,MAAM,CAACS,GAAP,CAAWC,OAAX,CAAmB;AACnCC,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,OAAO,EAAEL;AAAX;AAD4B,aAAnB,CAHL;;AAAA;AAGPE,YAAAA,GAHO;;AAAA,kBAOTA,GAAG,IAAIR,MAAM,CAACY,WAAP,CAAmBL,QAAnB,EAA6BC,GAAG,CAACD,QAAjC,CAPE;AAAA;AAAA;AAAA;;AAQLM,YAAAA,KARK,GAQGZ,GAAG,CAACa,IAAJ,CACZ;AAAEH,cAAAA,OAAO,EAAEH,GAAG,CAACG,OAAf;AAAwBI,cAAAA,EAAE,EAAEP,GAAG,CAACO,EAAhC;AAAoCC,cAAAA,IAAI,EAAE,IAAIC,IAAJ;AAA1C,aADY,EAEZC,OAAO,CAACC,GAAR,CAAYC,UAFA,EAGZ;AACEC,cAAAA,SAAS,EAAE;AADb,aAHY,CARH;AAgBXjB,YAAAA,GAAG,CAACkB,SAAJ,CACE,YADF,EAEEpB,MAAM,CAACqB,SAAP,CAAiB,OAAjB,EAA0BV,KAA1B,EAAiC;AAC/BW,cAAAA,QAAQ,EAAE,IADqB;AAE/BC,cAAAA,MAAM,EAAE,IAAI,EAAJ,GAAS,EAFc;AAG/BC,cAAAA,IAAI,EAAE,GAHyB;AAI/BC,cAAAA,QAAQ,EAAE,KAJqB;AAK/BC,cAAAA,MAAM;AALyB,aAAjC,CAFF;AAWAxB,YAAAA,GAAG,CAACyB,IAAJ,CAASrB,GAAT;AA3BW;AAAA;;AAAA;AA6BXJ,YAAAA,GAAG,CAACyB,IAAJ,CAAS;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAAT;AA7BW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { PrismaClient } from '@prisma/client'\nconst prisma = new PrismaClient()\nimport bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\nimport cookie from 'cookie'\n\nexport default async (req, res) => {\n  const { gigName, password } = req.body\n\n  const set = await prisma.set.findOne({\n    where: { setName: gigName },\n  })\n\n  if (set && bcrypt.compareSync(password, set.password)) {\n    const token = jwt.sign(\n      { setName: set.setName, id: set.id, time: new Date() },\n      process.env.JWT_SECRET,\n      {\n        expiresIn: \"6h\",\n      }\n    )\n\n    res.setHeader(\n      \"Set-Cookie\",\n      cookie.serialize(\"token\", token, {\n        httpOnly: true,\n        maxAge: 6 * 60 * 60,\n        path: \"/\",\n        sameSite: \"lax\",\n        secure: process.env.NODE_ENV === \"production\",\n      })\n    )\n\n    res.json(set)\n  } else {\n    res.json({ error: \"Incorrect username or password\" })\n    return\n  }\n}\n"]},"metadata":{},"sourceType":"module"}